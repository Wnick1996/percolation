import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;


// Estimates percolation threshold for an N-by-N percolation system.
public class PercolationStats {

    private double thresholdTracker[];
    private int numExperiments;
    private int percolationSize;

    // Perform T independent experiments (Monte Carlo simulations) on an 
    // N-by-N grid.
    public PercolationStats(int N, int T) {
        if (N <= 0 || T <= 0) {
            throw new java.lang.IllegalArgumentException("Your arguments are too small");
        }

        this.numExperiments = T;
        this.percolationSize = N;
        thresholdTracker = new double[N];       

        for (int i = 0; i < T; i++) { //performs T number of experiments
            Percolation percState = new Percolation(N);
            while (!percState.percolates()) { //continuously opens new sites while the grid doesn't percolate. 
                percState.open(StdRandom.uniform(N), StdRandom.uniform(N));

            }
            thresholdTracker[i] = (double) percState.numberOfOpenSites()/(N*N); //need to include double here because any fraction in int form is converted to zero. 
        }

    }
    
    // Sample mean of percolation threshold.
    public double mean() {    
        return StdStats.mean(thresholdTracker);

    }

    // Sample standard deviation of percolation threshold.
    public double stddev() {
        return StdStats.stddev(thresholdTracker);

    }

    // Low endpoint of the 95% confidence interval.
    public double confidenceLow() {
        return (mean() - 1.96 * stddev())/Math.sqrt(numExperiments);
    }

    // High endpoint of the 95% confidence interval.
    public double confidenceHigh() {
        return (mean() + 1.96 * stddev())/Math.sqrt(numExperiments);
    }
    

    // Test client.
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int T = Integer.parseInt(args[1]);
        PercolationStats stats = new PercolationStats(N, T);
        StdOut.printf("mean           = %f\n", stats.mean());
        StdOut.printf("stddev         = %f\n", stats.stddev());
        StdOut.printf("confidenceLow  = %f\n", stats.confidenceLow());
        StdOut.printf("confidenceHigh = %f\n", stats.confidenceHigh());
    }
}
